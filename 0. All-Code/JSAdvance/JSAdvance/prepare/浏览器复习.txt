递归的效率非常低
将一些计算量大的代码交给web worker 运行而不冻结用户界面
//创建一个Worker构造函数
var worker = new Worker("worker.js")

// 监听接受worker穿过来的数据函数
worker.onmessage = function (event){
	console.log("主线程接受分线的数据" + event.data)
	alert(event.data)
} 

//向分线程发送消息
worker.postMessage(number);
console.log("主线程向分线发送数据" + event.data)

复习
浏览器 内核模块组成
 - 主线程
	- js引擎模块：js程序的编译于运行
	- html ,css 文档解析：文本解析
	- DOM.CSS模块：内存中相关处理
	- 布局和渲染模块：页面的绘制和布局
 - 分线程
	- 定时器
	- DOM 
	- 网络请求 ajax
js线程
单线程-回调函数也是在主线程
H5 提出了多线程的解决方案： web workers两个线程同时做事，会产生错误
只能是主线程更新界面

定时器问题：
- 定时器并不真正完全定时
- 如果在主线程执行一个长时间操作，可能导致延时才处理

事件处理机制
代码分类：
- 初始化代码
- 回调函数代码
初始化执行完，才会执行回调执行代码
异步执行
模型2个重要组成部分
- 时间管理模块
- 回调队列
模型的运转流程
- 执行初始化代码，将时间回调函数交给对应的模块管理
- 当事件发生时，管理模块将会回调函数机器数据添加到回调队列中
- 只有初始化执行完，才会遍历读取队列这种的回调函数执行

H5 Web WORKER
- 可以让js在分线程执行
- worker
- onMessage
- postMessage

问题：
- worker内的代码不能操作DOM更新UI
看不到window
- 不是每个浏览器都支持这个新特性
- 不能JS跨域